services:
  mysql:
    image: mysql:latest
    hostname: mysql
    command: mysqld --default-authentication-plugin=mysql_native_password --log-error-verbosity=1
    environment:
    - MYSQL_RANDOM_ROOT_PASSWORD=yes
    - MYSQL_USER=tts_user
    - MYSQL_PASSWORD=password
    - MYSQL_DATABASE=TaskTrackingSystem
    ports:
    - "3306:3306"
    healthcheck:
      test: ["CMD", 'mysqladmin', 'ping', '-h', 'localhost', '-u', '$$MYSQL_USER', '--password=$$MYSQL_PASSWORD']
      timeout: 10s
      retries: 10
  migration:
    build:
      context: .
      dockerfile: ./migration/Dockerfile
      platforms:
      - "linux/amd64"
    environment:
    - DB_ENDPOINT=mysql
    - DB_USER=tts_user
    - DB_PASSWORD=password
    depends_on:
      mysql:
        condition: service_healthy
  kafka:
    image: &kafka-image bitnami/kafka:3.6
    hostname: kafka
    ports:
    - "9092:9092"
    - "9094:9094"
    volumes:
    - "kafka_data:/bitnami"
    environment:
    # KRaft settings
    - KAFKA_CFG_NODE_ID=0
    - KAFKA_CFG_PROCESS_ROLES=controller,broker
    - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
    # Listeners
    - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
    - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
    - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server=localhost:9092", "--list"]
      start_period: 15s
      interval: 10s
  init-kafka:
    image: *kafka-image
    working_dir: /opt/bitnami/kafka/bin
    entrypoint: /bin/bash
    depends_on:
      kafka:
        condition: service_healthy
    command: |
      kafka-topics.sh --create --if-not-exists --topic task_tracking_topic --replication-factor=1 --partitions=1 --bootstrap-server kafka:9092
  authservice:
    build:
      context: ./backend
      dockerfile: ./authservice/Dockerfile
    environment:
    - ASPNETCORE_ENVIRONMENT=Development
    - ASPNETCORE_URLS=http://+:8080
    - ConnectionString=server=mysql;port=3306;database=TaskTrackingSystem;uid=tts_user;pwd=password
    - Key=zCp9hhE@GxjdfFPTVkke8RcM3Fx
    - ExpiryMinutes=100
    ports:
    - "8180:8080"
    depends_on:
      migration:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
  projectservice:
    build:
      context: ./backend
      dockerfile: ./projectservice/Dockerfile
    environment:
    - ASPNETCORE_ENVIRONMENT=Development
    - ASPNETCORE_URLS=http://+:8080
    - ConnectionString=server=mysql;port=3306;database=TaskTrackingSystem;uid=tts_user;pwd=password
    - Key=zCp9hhE@GxjdfFPTVkke8RcM3Fx
    - ExpiryMinutes=100
    ports:
    - "8280:8080"
    depends_on:
      migration:
        condition: service_completed_successfully
  taskservice:
    build:
      context: ./backend
      dockerfile: ./taskservice/Dockerfile
    environment:
    - ASPNETCORE_ENVIRONMENT=Development
    - ASPNETCORE_URLS=http://+:8080
    - ConnectionString=server=mysql;port=3306;database=TaskTrackingSystem;uid=tts_user;pwd=password
    - Key=zCp9hhE@GxjdfFPTVkke8RcM3Fx
    - ExpiryMinutes=100
    ports:
    - "8380:8080"
    depends_on:
      migration:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    hostname: frontend
    ports:
    - "80:8080"
    depends_on:
      authservice:
        condition: service_started
volumes:
  kafka_data:
    driver: local
